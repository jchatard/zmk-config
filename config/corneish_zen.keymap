/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "keymap_optimot.h"

#define DEFAULT 0
#define SYMB    1
#define MOVE    2
#define GEEK    3
#define CMD     4
#define ADJUST  5

#define MEH LA(LS(LCTRL))


// Key position groups
#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35   
#define THUMBS_L 36 37 38
#define THUMBS_R 39 40 41


/*                KEY POSITIONS

  ╭────────────────────────╮ ╭────────────────────────╮
  │  0   1   2   3   4   5 │ │  6   7   8   9  10  11 │
  │ 12  13  14  15  16  17 │ │ 18  19  20  21  22  23 │
  │ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │
  ╰───────────╮ 36  37  38 │ │ 39  40  41 ╭───────────╯
              ╰────────────╯ ╰────────────╯            */

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };

  behaviors {
        //////////////////////////////////////////////////////////////////////////
        //
        // Miryoku layers and home row mods (ported from my QMK endgame)
        // - https://sunaku.github.io/home-row-mods.html#porting-to-zmk
        // - https://github.com/urob/zmk-config#timeless-homerow-mods
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for the pinky, ring, and middle fingers (which are assigned to Super,
        // Alt, and Ctrl respectively in the Miryoku system) on home row keys.
        //
        #ifndef HOMEY_HOLDING_TYPE
        #define HOMEY_HOLDING_TYPE "tap-preferred"
        #endif

        //
        // HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
        // home row mod keys in order to send their modifiers to the computer
        // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
        //
        #ifndef HOMEY_HOLDING_TIME
        #define HOMEY_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
        #endif

        //
        // HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
        // after typing before you can use home row mods again.  It prevents
        // unintended activation of home row mods when you're actively typing.
        //
        #ifndef HOMEY_STREAK_DECAY
        #define HOMEY_STREAK_DECAY 170 // global-quick-tap-ms
        #endif

        //
        // HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef HOMEY_REPEAT_DECAY
        #define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
        #endif

        //
        // SHIFT_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for index fingers (which Miryoku assigns to Shift) on home row keys.
        //
        // NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
        // allows faster activation of the Shift modifier (without having to wait
        // for the modified key to be released as the "balanced" flavor requires).
        // Typing streaks and the `hold-trigger-on-release` setting are disabled
        // for the index fingers so as not to hinder their speed and dexterity.
        //
        #ifndef SHIFT_HOLDING_TYPE
        #define SHIFT_HOLDING_TYPE "tap-preferred"
        #endif

        //
        // SHIFT_HOLDING_TIME defines how long you need to hold (milliseconds)
        // index finger keys in order to send their modifiers to the computer
        // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
        //
        // CAUTION: You'll need to perform inward rolls from pinky->ring->middle
        // fingers toward the index fingers when activating multiple modifiers
        // because `hold-trigger-on-release` is disabled for the index fingers.
        // Otherwise, you may be surprised that the index fingers' modifier is
        // sent immediately without the rest of your multi-mod chord when you
        // perform outward rolls from your index fingers toward your pinkies.
        //
        #ifndef SHIFT_HOLDING_TIME
        #define SHIFT_HOLDING_TIME 170
        #endif

        //
        // SHIFT_STREAK_DECAY defines how long you need to wait (milliseconds)
        // after typing before you can use home row mods again.  It prevents
        // unintended activation of home row mods when you're actively typing.
        //
        #ifndef SHIFT_STREAK_DECAY
        #define SHIFT_STREAK_DECAY 70 // global-quick-tap-ms
        #endif

        //
        // SHIFT_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef SHIFT_REPEAT_DECAY
        #define SHIFT_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
        #endif

        //
        // THUMB_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for the thumbs (which are assigned to 6 layers in the Miryoku system).
        //
        // NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
        // activation for the symbol layer (if the tapped symbol key is released
        // while the thumb layer key is still held down) for quicker programming.
        //
        #ifndef THUMB_HOLDING_TYPE
        #define THUMB_HOLDING_TYPE "balanced"
        #endif

        //
        // THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
        // a thumb key to activate a layer.  Shorter holds are treated as taps.
        //
        #ifndef THUMB_HOLDING_TIME
        #define THUMB_HOLDING_TIME 200
        #endif

        //
        // THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef THUMB_REPEAT_DECAY
        #define THUMB_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
        #endif

        //
        // SPACE_HOLDING_TIME defines how long you need to hold (milliseconds)
        // the space thumb key to activate.  Shorter holds are treated as taps.
        //
        #ifndef SPACE_HOLDING_TIME
        #define SPACE_HOLDING_TIME 170
        #endif

        //
        // SPACE_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef SPACE_REPEAT_DECAY
        #define SPACE_REPEAT_DECAY 200 // "tap then hold" for key auto-repeat
        #endif

        //
        // Home row mod-tap keys for all except index fingers
        //
        homey_left: miryoku_home_row_mods_left_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_HAND";
            flavor = HOMEY_HOLDING_TYPE;
            hold-trigger-key-positions = <KEYS_R THUMBS_L THUMBS_R>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_HOLDING_TIME>;
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        homey_right: miryoku_home_row_mods_right_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT_HAND";
            flavor = HOMEY_HOLDING_TYPE;
            hold-trigger-key-positions = <KEYS_L THUMBS_L THUMBS_R>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <HOMEY_HOLDING_TIME>;
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        //
        // Special home row mod-tap keys for the index fingers
        //
        shift_left: miryoku_home_row_mods_left_shift_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_SHIFT_SHIFT";
            flavor = SHIFT_HOLDING_TYPE;
            hold-trigger-key-positions = <KEYS_R THUMBS_L THUMBS_R>;
            //hold-trigger-on-release; // don't wait for other mods
            tapping-term-ms = <SHIFT_HOLDING_TIME>;
            quick-tap-ms = <SHIFT_REPEAT_DECAY>;
            require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        shift_right: miryoku_home_row_mods_right_shift_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT_SHIFT_SHIFT";
            flavor = SHIFT_HOLDING_TYPE;
            hold-trigger-key-positions = <KEYS_L THUMBS_L THUMBS_R>;
            //hold-trigger-on-release; // don't wait for other mods
            tapping-term-ms = <SHIFT_HOLDING_TIME>;
            quick-tap-ms = <SHIFT_REPEAT_DECAY>;
            require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        //
        // Thumb cluster hold-tap keys for Miryoku layers
        //
        thumb: miryoku_thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "MIRYOKU_THUMB_LAYER";
            flavor = THUMB_HOLDING_TYPE;
            tapping-term-ms = <THUMB_HOLDING_TIME>;
            quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
            //global-quick-tap; // no typing streak
            //retro-tap; // don't allow slow (hold-like) taps
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
        space: miryoku_thumb_layer_spacebar {
            compatible = "zmk,behavior-hold-tap";
            label = "MIRYOKU_THUMB_LAYER_SPACEBAR";
            flavor = THUMB_HOLDING_TYPE;
            tapping-term-ms = <SPACE_HOLDING_TIME>;
            quick-tap-ms = <SPACE_REPEAT_DECAY>; // enable repeat
            //global-quick-tap; // no typing streak
            retro-tap; // allow slow (hold-like) taps
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };


        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <210>;
            quick-tap-ms = <175>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        grcaps: grave_caps {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_CMD";
            #binding-cells = <0>;
            bindings = <&kp CAPS>, <&kp OP_DLR>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_backspace {
            timeout-ms = <40>;
            key-positions = <0 1>; // Backspace = TAB & à
            bindings = <&kp BSPC>;
        };

        combo_hash {
            timeout-ms = <50>;
            key-positions = <25 26>; // # = k & y
            bindings = <&kp OP_HASH>;
        };
    };

};

&mt {
    flavor = "tap-preferred";
    //tapping-term-ms = <150>;
    //quick-tap-ms = <150>;              // repeat on tap-into-hold
    // maybe I should also remove this…
    global-quick-tap;
    // hold-trigger-key-positions = <0>;  // tap on interrupt
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "Optimot";
// ---------------------------------------------------------------------------------------------------
// | RCTRL TAB|  à   |  j  |  o    |  é    |  b    |   |  f     |  d    |  l      |  '  |  qu  |  x  |
// | CAPS  (`)|  a   |  i  |  e    |  u    |  ,    |   |  p     |  t    |  s      |  r  |  n   |  ^  |
// | SHFT #   |  k   |  y  |  è    | . GEEK|  w    |   |  g     |  c    |  m      |  h  |  v   |  z  |
//                         | CTRL  |  ALT  |GUI RET|   | (S)SPC | -> ç  |SYM  @   | 

                        bindings = <
   &mt RCTRL TAB      &kp OP_AGRV &kp OP_J &kp OP_O         &kp OP_EACU     &kp OP_B      &kp OP_F          &kp OP_D         &kp OP_L      &kp OP_QUOT &kp OP_Q &kp OP_X
   &grcaps            &homey_left LGUI OP_A    &homey_left LCTRL OP_I &homey_left LALT OP_E         &shift_left LSHIFT OP_U        &kp OP_COMM   &kp OP_P          &shift_right RSHIFT OP_T         &homey_right RALT OP_S      &homey_right RCTRL OP_R    &homey_right RGUI OP_N &kp OP_CIR
   &mt LSHIFT OP_HASH &kp OP_K    &kp OP_Y &kp OP_EGRV      &lt GEEK OP_DOT &kp OP_W      &kp OP_G          &kp OP_C         &kp OP_M      &kp OP_H    &kp OP_V &kp OP_Z
                                           &kp LCTRL        &kp LALT        &mt LGUI RET  &gpt LSHIFT SPACE &lt MOVE OP_CCED &lt SYMB OP_AT
                        >;
                };
                lower_layer {
                        label = "Symbols";
// -----------------------------------------------------------------------------------------
// | ESC|  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |   `  | 
// |    |  «  |  »  |  "  |  -  |  +  |   |  *  |  /  |  =  |  (  |  )  |      |
// |BSPC|  %  |  @  |  #  |  $  |  €  |   |     |BSPC | DEL | MEH | ESC |      |
//                  | CTRL| ALT | GUI |   |     |     |     |
                        bindings = <
   &kp ESC     &kp OP_1    &kp OP_2     &kp OP_3     &kp OP_4     &kp OP_5    &kp OP_6    &kp OP_7     &kp OP_8   &kp OP_9    &kp OP_0    &kp OP_LSQU
   &trans      &homey_left LGUI  OP_LDAQ &homey_left LCTRL OP_RDAQ  &homey_left LALT OP_DQUO  &shift_left LSHIFT OP_MIN   &kp OP_PLUS &kp OP_ASTR &shift_right RSHIFT OP_SLSH  &homey_right RALT OP_EQL &homey_right RCTRL OP_LPRN &homey_right RGUI OP_RPRN &trans
   &kp BSPC    &kp OP_PERC &kp OP_AT    &kp OP_HASH  &kp OP_DLR   &kp OP_EURO &trans      &kp BSPC     &kp DEL    &kp MEH     &kp ESC     &trans
                                        &trans       &trans       &trans      &trans      &kp LS(OP_W) &kp LS(OP_CCED)
                        >;
                };

                raise_layer {
                        label = "Move";
// -------------------------------------------------------------------------------------------------
// |  #   |  |  |  &  |  [   |   ]   |   €  |   | DEL   | Pup     |  Up  | Pdow      | "    | RET  |
// |  @   |  {  |  }  |  (   |   )   |   \  |   | BSPC  | Left    |  Dwn | Right     | '    | SPACE|
// | SHFT |  !  |  =  |  <   |   >   |   /  |   | +     |   -     |  $   | *         | `    | ESC  |
//                    | CTRL |  ALT  | GUI  |   |       |         |SPACE |
                        bindings = <
   &kp OP_HASH &kp OP_PIPE &kp OP_AMPR  &kp OP_LBRC &kp OP_RBRC &kp OP_EURO    &kp DEL     &kp PG_UP  &kp UP     &kp PG_DN   &kp OP_DQUO &kp RET
   &kp OP_AT   &homey_left LGUI   OP_LCBR &homey_left LCTRL OP_RCBR  &homey_left LALT OP_LPRN &shift_left LSHIFT OP_RPRN &kp OP_BSLS    &kp BSPC    &kp LEFT   &kp DOWN   &kp RIGHT   &kp OP_QUOT &kp SPACE
   &trans      &kp OP_EXL  &kp OP_EQL   &kp OP_LABK &kp OP_RABK &kp OP_SLSH    &kp OP_PLUS &kp OP_MIN &kp OP_DLR &kp OP_ASTR &kp OP_LSQU &kp ESC
                                        &kp LCTRL   &kp LALT    &kp LGUI       &trans      &trans     &trans
                        >;
                };


                pad_layer {
                        label = "Geek";
// -----------------------------------------------------------------------------------
// |  #   |  |  |  &  |  [   |   ]   |   €  |   | DEL |  7  |  8  |  9  |  $  |  €   |
// |  @   |  {  |  }  |  (   |   )   |   \  |   | BCK |  4  |  5  |  6  |  0  |  =   |
// |ADJUST|  !  |  =  |  <   |   >   |   /  |   |  *  |  1  |  2  |  3  |  %  |  RET |
//                    |  "   |   '   |      |   | SPC |  .  |  ,  |
                        bindings = <
   &kp OP_HASH &kp OP_PIPE &kp OP_AMPR  &kp OP_LBRC &kp OP_RBRC &kp OP_EURO   &kp DEL     &kp OP_7     &kp OP_8    &kp OP_9 &kp OP_DLR  &kp OP_EURO
   &kp OP_AT   &kp OP_LCBR &kp OP_RCBR  &kp OP_LPRN &kp OP_RPRN &kp OP_BSLS   &kp BSPC    &kp OP_4     &kp OP_5    &kp OP_6 &kp OP_0    &kp OP_EQL
   &mo ADJUST  &kp OP_EXL  &kp OP_EQL   &kp OP_LABK &kp OP_LABK &kp OP_SLSH   &kp OP_ASTR &kp OP_1     &kp OP_2    &kp OP_3 &kp OP_PERC &kp RET
                                        &kp OP_DQUO &kp OP_QUOT &trans        &kp SPACE   &kp OP_DOT   &kp OP_COMM
                        >;
                };

                cmd_layer {
                        label = "CMD";
// --------------------------------------------------------------------------------------------------
// | GRAVE_ESC|CAPS  |      |      |      | DEL    |   | DEL    |      | ESC   |      |      |      |
// | SHIFT    |      |      |      |      | BSPC   |   | BSPC   |  ⌘Z  | RET   |      |      |      |
// |          |      |      |      |      |        |   |        |      |       |      |      |      |
//                          |      |      |        |   |        |      |       |
                          bindings = <
   &kp ESC     &kp CAPS &trans &trans &trans &kp DEL      &kp DEL  &trans       &kp ESC &trans &trans &trans
   &kp LSHIFT  &trans   &trans &trans &trans &kp BSPC     &kp BSPC &kp LG(OP_Z) &kp RET &trans &trans &trans
   &trans      &trans   &trans &trans &trans &trans       &trans   &trans       &trans  &trans &trans &trans
                               &trans &trans &trans       &trans   &trans       &trans
                        >;
                };

                adjust_layer {
                        label = "Adjust";
// -----------------------------------------------------------------------------------------
// |  TAB |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7  |  F8  |  F9 |  F10| BKSP |
// |      |  F11|  F12|  F13|  F14|  F15|   |  F16|  F17 |  F18 |  F19|  F20| BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN  |  UP  | RGT |     |      |
//                    | GUI |     | SPC |   | ENT |BT nxt|BT prv|
                        bindings = <
   &kp TAB    &kp F1       &kp F2       &kp F3       &kp F4       &kp F5         &kp F6   &kp F7     &kp F8    &kp F9    &kp F10 &trans
   &trans     &kp F11      &kp F12      &kp F13      &kp F14      &kp F15        &kp F16  &kp F17    &kp F18   &kp F19   &kp F20 &trans
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &trans   &trans     &trans    &trans    &trans  &trans
                                        &kp LGUI     &trans       &kp SPACE      &kp RET  &bt BT_NXT &bt BT_PRV
                        >;
                };

        };
};